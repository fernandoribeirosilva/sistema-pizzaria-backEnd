// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id        Int     @id @default(autoincrement())
  firstName String  @db.VarChar(150)
  lastName  String  @db.VarChar(150)
  token     String?
  adressId  Int     @unique

  adress Address @relation(fields: [adressId], references: [id])

  telephone Telephone[]
  purchase  Purchase[]

  @@map("client")
}

model Address {
  id         Int     @id @default(autoincrement())
  street     String  @db.VarChar(150)
  block      String  @db.VarChar(50)
  batch      String  @db.VarChar(50)
  complement String? @db.VarChar(80)

  client Client?

  districtId Int
  district   District @relation(fields: [districtId], references: [id])

  @@map("address")
}

model District {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(150)

  address Address[]

  @@map("district")
}

model Telephone {
  id       Int @id @default(autoincrement())
  number   Int
  clientId Int

  client Client @relation(fields: [clientId], references: [id])

  @@map("telephone")
}

model Pizza {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(150)
  price       Float
  size        String[]// scalar list
  description String   @db.VarChar(80)
  img         String   @default("defaultPizza.png")

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  purchase Purchase[]

  @@map("pizza")
}

model Drink {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(150)
  price       Float
  img         String  @default("defaultDrink.png")
  description String? @db.VarChar(80)

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  purchase Purchase[]

  @@map("drink")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  pizzas Pizza[]
  drinks Drink[]

  @@map("category")
}

model Purchase {
  id       Int   @id @default(autoincrement())
  clientId Int
  drinkId  Int
  pizzaId  Int
  qtdDrink Int
  qtdPizza Int
  total    Float

  client Client @relation(fields: [clientId], references: [id])
  drink  Drink  @relation(fields: [drinkId], references: [id])
  pizza  Pizza  @relation(fields: [pizzaId], references: [id])

  @@map("purchase")
}

model Adm {
  id       Int     @id @default(autoincrement())
  email    String  @unique @db.VarChar(100)
  password String  @db.VarChar(255)
  adm      Boolean @default(false)

  @@map("adm")
}
